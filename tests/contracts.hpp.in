#pragma once
#include <eosio/testing/tester.hpp>

namespace eosio {
namespace testing {

struct contracts {
   static std::vector<uint8_t> system_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eosio.system/eosio.system.wasm"); }
   static std::string system_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eosio.system/eosio.system.wast"); }
   static std::vector<char> system_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eosio.system/eosio.system.abi"); }
   static std::vector<uint8_t> token_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eosio.token/eosio.token.wasm"); }
   static std::string token_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eosio.token/eosio.token.wast"); }
   static std::vector<char> token_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eosio.token/eosio.token.abi"); }
   static std::vector<uint8_t> msig_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eosio.msig/eosio.msig.wasm"); }
   static std::string msig_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eosio.msig/eosio.msig.wast"); }
   static std::vector<char> msig_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eosio.msig/eosio.msig.abi"); }
   static std::vector<uint8_t> wrap_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eosio.wrap/eosio.wrap.wasm"); }
   static std::string wrap_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eosio.wrap/eosio.wrap.wast"); }
   static std::vector<char> wrap_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eosio.wrap/eosio.wrap.abi"); }
   static std::vector<uint8_t> bios_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eosio.bios/eosio.bios.wasm"); }
   static std::string bios_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eosio.bios/eosio.bios.wast"); }
   static std::vector<char> bios_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eosio.bios/eosio.bios.abi"); }
   static std::vector<uint8_t> personal_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/personal.bos/personal.bos.wasm"); }
   static std::string personal_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/personal.bos/personal.bos.wast"); }
   static std::vector<char> personal_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/personal.bos/personal.bos.abi"); }
   static std::vector<uint8_t> oracle_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/bos.oracle/bos.oracle.wasm"); }
   static std::string oracle_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/bos.oracle/bos.oracle.wast"); }
   static std::vector<char> oracle_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/bos.oracle/bos.oracle.abi"); }
   static std::vector<uint8_t> consumer_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/bos.oracle/consumer.contract/consumer.contract.wasm"); }
   static std::string consumer_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/bos.oracle/consumer.contract/consumer.contract.wast"); }
   static std::vector<char> consumer_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/bos.oracle/consumer.contract/consumer.contract.abi"); }
   static std::vector<uint8_t> burn_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/bos.burn/bos.burn.wasm"); }
   static std::string burn_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/bos.burn/bos.burn.wast"); }
   static std::vector<char> burn_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/bos.burn/bos.burn.abi"); }

   struct util {
      static std::vector<uint8_t> test_api_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/test_api.wasm"); }
      static std::vector<uint8_t> exchange_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/exchange.wasm"); }
      static std::vector<uint8_t> system_wasm_old() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/eosio.system.old/eosio.system.wasm"); }
      static std::vector<char> system_abi_old() { return read_abi("${CMAKE_SOURCE_DIR}/test_contracts/eosio.system.old/eosio.system.abi"); }
      static std::vector<uint8_t> msig_wasm_old() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/eosio.msig.old/eosio.msig.wasm"); }
      static std::vector<char> msig_abi_old() { return read_abi("${CMAKE_SOURCE_DIR}/test_contracts/eosio.msig.old/eosio.msig.abi"); }
   };
};
} // namespace testing
} // namespace eosio
